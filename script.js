const map = L.map('map').setView([35.3315, 139.4033], 15);

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '¬© OpenStreetMap contributors'
}).addTo(map);

// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
let restaurantMarkers = [];
let homeMarker;

// ‰ªäÊó•„ÅÆÊõúÊó•„ÇíÂèñÂæó
const getToday = () => {
  const days = ["Êó•", "Êúà", "ÁÅ´", "Ê∞¥", "Êú®", "Èáë", "Âúü"];
  return days[new Date().getDay()];
};

// Â§©Ê∞óÊÉÖÂ†±„ÅÆÂèñÂæó
// üîë „Åì„Åì„Å´„ÅÇ„Å™„Åü„ÅÆAPI„Ç≠„Éº„ÇíÂÖ•Âäõ
const API_KEY = "64a9f612a58030710d4281a20aa785da";

// Â§©Ê∞óÂèñÂæó
function fetchWeather() {
  const url = `https://api.openweathermap.org/data/2.5/weather?q=Chigasaki,jp&units=metric&lang=ja&appid=${API_KEY}`;
  fetch(url)
    .then(res => res.json())
    .then(data => {
      const temp = Math.round(data.main.temp);
      const weather = data.weather[0].description;
      const icon = data.weather[0].icon;
      const iconUrl = `https://openweathermap.org/img/wn/${icon}.png`;

      const weatherText = `<img src="${iconUrl}" alt="${weather}" /> ${weather} ${temp}‚ÑÉÔºàÁèæÂú®Ôºâ`;
      const weatherDiv = document.getElementById("weather-info");
      if (weatherDiv) {
        weatherDiv.innerHTML = weatherText;
      } else {
        console.warn("weather div not found");
      }
    })
    .catch(err => {
      console.error("Â§©Ê∞óÂèñÂæóÂ§±Êïó:", err);
      const weatherDiv = document.getElementById("weather-info");
      if (weatherDiv) {
        weatherDiv.textContent = "Â§©Ê∞óÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü";
      }
    });
}

// üîÅ ÂÆüË°å
fetchWeather();

// Âú∞Âõ≥„Å´„Éî„É≥„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
function renderMarkers(restaurants, selectedDay) {
  // ‰∏ÄÂ∫¶ÂâäÈô§ÔºàÈáçË§á„Åó„Å™„ÅÑ„Çà„ÅÜÔºâ
  restaurantMarkers.forEach(marker => map.removeLayer(marker));
  restaurantMarkers = [];

  restaurants.forEach(spot => {
    const isClosedToday =
      Array.isArray(spot.closed) &&
      spot.closed.some(day => day.trim() === selectedDay);
    const statusText = isClosedToday ? "‚ùå ÂÆö‰ºëÊó•" : "‚úÖ Âñ∂Ê•≠Êó•";

    const marker = L.marker([spot.lat, spot.lng]).addTo(map);
    const popup = L.popup({ autoClose: false, closeOnClick: false })
      .setContent(`
        <a href="${spot.url}" target="_blank"><strong>${spot.name}</strong></a><br/>
        ${statusText}
      `);
    marker.bindPopup(popup).openPopup();

    restaurantMarkers.push(marker);
  });
}

fetch('data.json')
  .then(res => res.json())
  .then(restaurants => {
    // ÂàùÊúüÁä∂ÊÖã„Åß‰ªäÊó•„ÅÆÊõúÊó•„Çí‰Ωø„ÅÜ
    const today = getToday();
    document.getElementById('weekday').value = today;
    renderMarkers(restaurants, today);

    // Ëá™ÂÆÖ„Éî„É≥„ÅØ1Âõû„Å†„ÅëË°®Á§∫
    const myHome = {
      lat: 35.325965494228086,
      lng: 139.4037473836777,
      label: "üè† Ëá™ÂÆÖ"
    };

    const redIcon = L.icon({
      iconUrl: "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [0, -35]
    });

    homeMarker = L.marker([myHome.lat, myHome.lng], { icon: redIcon }).addTo(map);
    const homePopup = L.popup({ autoClose: false, closeOnClick: false }).setContent(myHome.label);
    homeMarker.bindPopup(homePopup).openPopup();

    // „Çª„É¨„ÇØ„Éà„Éú„ÉÉ„ÇØ„Çπ„ÅÆÂ§âÊõ¥ÊôÇ„Å´Âñ∂Ê•≠Âà§ÂÆö„ÇíÂÜçÊèèÁîª
    document.getElementById('weekday').addEventListener('change', (e) => {
      const selectedDay = e.target.value;
      renderMarkers(restaurants, selectedDay);
    });

    // Â§©Ê∞óË°®Á§∫„ÅÆ„Éà„Ç∞„É´Âàá„ÇäÊõø„Åà
  document.addEventListener('DOMContentLoaded', () => {
  const toggleBtn = document.getElementById("weather-toggle");
  const weatherInfo = document.getElementById("weather-info");

  if (toggleBtn && weatherInfo) {
    toggleBtn.addEventListener("click", () => {
      const visible = weatherInfo.style.display !== "none";
      weatherInfo.style.display = visible ? "none" : "block";
    });
  }
});
  });